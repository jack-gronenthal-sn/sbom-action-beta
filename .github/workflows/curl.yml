name: cURL SBOM Application

on:
  workflow_dispatch:
    inputs:
      operation:
        type: choice
        description: Operation
        options: 
        - upload
        - status
        required: true
    secrets:
      sn-instance-url:
        required: true
  workflow_call:
    inputs:
      operation:
        type: string
        required: true
        description: The kind of operation to perform
      document:
        type: string
        required: false
        description: The SBOM document to be uploaded.
    outputs:
      bom_record_id:
        description: "The BOM Document ID that is returned from ServiceNow SBOM."
        value: ${{ jobs.upload.outputs.bom_record_id }}
    secrets:
      sn-instance-url:
        required: true
      sn-sbom-username:
        required: true
      sn-sbom-password:
        required: true

jobs:
  upload:
    runs-on: ubuntu-latest
    if: ${{ inputs.operation }} == 'upload'
    outputs:
      bom_record_id: ${{ steps.Upload.outputs.bom_record_id }}

    steps:
    - name: Upload
      run: echo "Detected an upload operation -> ${{ inputs.operation }}"
    - if: ${{ inputs.args.summary.doSummarize == '' || inputs.args.summary.doSummarize != false }}
      run: echo '### ServiceNow SBOM Upload' >> $GITHUB_STEP_SUMMARY
    - name: Perform CURL to Vulnerability Response Application
      run: |
    
        response=$(curl -f -s \
              -H 'Content-Type: application/json' \
              -d '${{ inputs.document }}' \
              --write-out '\n%{response_code}' \
              ${{ secrets.sn-instance-url}}/api/sbom/core/upload \
              -u ${{ secrets.sn-sbom-username }}:${{ secrets.sn-sbom-password }} \
        )

        data=${response%$'\n'*}
        status_code="${response: -3}"
        
        if [ "$status_code" == "200" ]; then
        
          bom_record_id=$(echo "$data" | jq -r '.result.bomRecordId')
          echo SANITY $bom_record_id
          echo "bom_record_id=$bom_record_id" >> "$GITHUB_OUTPUT"
        
          if [ ${{ inputs.args.summary.doSummarize == '' || inputs.args.summary.doSummarize != false }} ]; then
            {
              echo '~~~json'
              jq <<< $data
              echo '~~~'
            } >> "$GITHUB_STEP_SUMMARY"
          fi
        fi
  sanity:
    needs: upload
    runs-on: ubuntu-latest
    steps:
      - run: echo '${{ needs.Upload.outputs.bom_record_id }}'

#  status:
#    runs-on: ubuntu-latest
#    if: ${{ inputs.operation }} == 'status'
#    steps:
#    - name: Status
#      run: echo "Detected a status operation -> ${{ inputs.operation }}"


#        data=$(echo "$response" | awk '{$NF=""; sub(/[[:space:]]+$/, "")}1')
#        status_code=$(echo "$response" | awk '{print $NF}')