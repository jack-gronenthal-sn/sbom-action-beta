name: ServiceNow SBOM Integration
run-name: ${{ github.actor }} is uploading a SBOM to ServiceNow.
on:
  # Executed when an action is invoked via GitHub
  workflow_call:
    inputs:
      args:
        description: A JSON object that captures the arguments for execution.
        required: false
        type: string
    secrets:
      sn-sbom-username:
        required: true
      sn-sbom-password:
        required: true
      sn-instance-url:
        required: true

  # Invoked via a REST API
  workflow_dispatch:
    inputs:
      sbom-repository-name:
        description: The repository that holds the SBOM document.
        required: true
        type: string
      sbom-path:
        description: The path to the SBOM document from the root directory.
        type: string
        required: true
      ref:
        description: The branch, tag, or SHA256 hash to checkout.
        type: string
        required: false
    secrets:
      service-now-sbom-username:
        required: true
      service-now-sbom-password:
        required: true
      service-now-instance-url:
        required: true

jobs:
  checkout-repositories:
    runs-on: ubuntu-latest
    outputs:
      document: ${{ steps.sbom-document-source.outputs.sbom_document }}
      provider_type: ${{ steps.report-validation-success-and-set-arguments.outputs.provider_type }}
    steps:
      - name: Checkout the ServiceNow SBOM Workflow.
        uses: actions/checkout@v4
        with:
          repository: jack-gronenthal-sn/sbom-action-beta
          path: service-now
          ref: json-input

      - name: Checkout Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest

      # Validate runtime arguments to the SBOM GitHub Action, not to the API itself.
      - name: Validate Runtime Arguments
        id: validate-runtime-args
        continue-on-error: true
        run: |
          npm install -g ajv-cli
          echo '${{ inputs.args }}' >> $GITHUB_WORKSPACE/service-now/_args.json
          
          mkdir $GITHUB_WORKSPACE/service-now/logs
          ajv test --spec=draft2020 -s $GITHUB_WORKSPACE/service-now/input_schema.json -d $GITHUB_WORKSPACE/service-now/_args.json --valid 2> $GITHUB_WORKSPACE/service-now/logs/.ajv_error_log ; \
            sed -n "s/.*message: \"\([^\"]*\)\".*/\1/p" $GITHUB_WORKSPACE/service-now/logs/.ajv_error_log

      - name: Report Validation Failures
        id: report-validation-failures
        if: ${{ steps.validate-runtime-args.outcome == 'failure' }}
        run: |
          echo "::group::Invalid Input Arguments"
          
          error_message=$(sed -n "s/.*message: \"\([^\"]*\)\".*/\1/p" $GITHUB_WORKSPACE/service-now/logs/.ajv_error_log)
          echo "::error title=❌ Runtime Arguments Failed Validation::$error_message" # Consider if the single quote will break this
          cat $GITHUB_WORKSPACE/service-now/logs/.ajv_error_log
          echo "::endgroup::"  
          
          exit 1

      - name: Report Validation Success & Set Runtime Arguments
        id: report-validation-success-and-set-arguments
        if: ${{ steps.validate-runtime-args.outcome == 'success' }}
        run: |
          echo "✅ Runtime Arguments Validated Successfully"
          provider_type=$(echo '${{ inputs.args }}' | jq -r '.provider.type')
          
          # Provider Type: Repository
          if [ "$provider_type" == "repository" ]; then
            repository_name=$(echo '${{ inputs.args }}' | jq -r '.provider.repository.repositoryName')
            path=$(echo '${{ inputs.args }}' | jq -r '.provider.repository.path')
          fi
          
          # Set the Outputs
          echo "provider_type=$provider_type" >> $GITHUB_OUTPUT
          echo "repository_name=$repository_name" >> $GITHUB_OUTPUT
          echo "path=$path" >> $GITHUB_OUTPUT
          
          # Log the Arguments
          echo "::group::Arguments"
          echo Provider Type: $provider_type
          echo Repository Name: $repository_name
          echo Path: $path
          echo "::endgroup::"  


      - name: Checkout the client repository.
        uses: actions/checkout@v4
        if: ${{ steps.report-validation-success-and-set-arguments.outputs.provider_type == 'repository' }}
        with:
          repository: ${{ steps.report-validation-success-and-set-arguments.outputs.repository_name }}
          path: client
          sparse-checkout: |
            ${{ steps.report-validation-success-and-set-arguments.outputs.path }}

      - name: Fetch SBOM Document.
        id: fetch-sbom-document
        if: ${{ steps.report-validation-success-and-set-arguments.outputs.provider_type == 'repository' }}
        run: |
          echo sbom_document=$(cat "$GITHUB_WORKSPACE/client/${{ steps.report-validation-success-and-set-arguments.outputs.path }}") >> "$GITHUB_OUTPUT"

  cURL:
    needs: checkout-repositories
    uses: jack-gronenthal-sn/sbom-action-beta/.github/workflows/curl.yml@json-input
    with:
     operation: upload
     document: ${{ needs.checkout-repositories.outputs.document }}
    secrets:
     sn-instance-url:   ${{ secrets.sn-instance-url }}
     sn-sbom-username:  ${{ secrets.sn-sbom-username }}
     sn-sbom-password:  ${{ secrets.sn-sbom-password }}



#      - name: Checkout the ServiceNow SBOM Workflow.
#        uses: actions/checkout@v4
#        with:
#          repository: jack-gronenthal-sn/sbom-action-beta
#          path: service-now

#      - name: Post the SBOM document to the ServiceNow Platform.
#        run: |
#          curl ${{ secrets.service-now-instance-url}}/api/snc/test_github_action -u ${{ secrets.service-now-sbom-username }}:${{ secrets.service-now-sbom-password }}

#      - run: echo "${{ secrets.service-now-sbom-username }}"
#      - name: Verify Structure
#        run: |
#            echo WORKSPACE
#            ls "$GITHUB_WORKSPACE"
#            echo CLIENT
#            ls "$GITHUB_WORKSPACE/client"
#            echo SERVICE-NOW
#            ls "$GITHUB_WORKSPACE/service-now"
#            echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
#            cat "$GITHUB_WORKSPACE/client/${{ inputs.sbom-path }}"

#jobs:
#  checkout-repo:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the repository to the runner
#        uses: actions/checkout@v4
#        with:
#          repository: ${{ inputs.sbom-repository-name }}
#          ref: ${{ inputs.sbom-repository-ref }}
#      - name: Log Integration Inputs
#        run: ./inputs.sh
#        env:
#          SERVICE_NOW_INSTANCE_URL: Test
#          SBOM_SOURCE_STRATEGY: ${{ inputs.sbom-source-strategy }}
#          SBOM_SOURCE_DIRECTORY: ${{ inputs.sbom-source-directory }}
#          GITHUB_ACTION_PATH: ${{ github.action_path }}
#  log-inputs:
#    runs-on: ubuntu-latest
#    needs: checkout-repo
#    defaults:
#      run:
#        shell: bash
#        working-directory: ./scripts
#    steps:
#      - name: list
#        run: ls -A >> $GITHUB_OUTPUT
#      - name: Make scripts executable
#        run: chmod +x ./input.sh
#      - name: Log workflow inputs
#        run: ./inputs.sh