name: ServiceNow SBOM Integration
run-name: ${{ github.actor }} is uploading a SBOM to ServiceNow.
on:
  # Executed when an action is invoked via GitHub
  workflow_call:
    inputs:
      args:
        description: A JSON object that captures the arguments for execution.
        required: false
        type: string
    secrets:
      sn-sbom-username:
        required: true
      sn-sbom-password:
        required: true
      sn-instance-url:
        required: true

  # Invoked via a REST API
  workflow_dispatch:
    inputs:
      sbom-repository-name:
        description: The repository that holds the SBOM document.
        required: true
        type: string
      version:
        description: The version of the GitHub Action to be executed.
        required: false
        type: string
        default: json-input
    secrets:
      service-now-sbom-username:
        required: true
      service-now-sbom-password:
        required: true
      service-now-instance-url:
        required: true

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      document: ${{ steps.fetch-sbom-document.outputs.document }}
      provider_type: ${{ steps.report-validation-success-and-set-arguments.outputs.provider_type }}
    steps:
      - if: ${{ inputs.args.summary.doSummarize == '' || inputs.args.summary.doSummarize != false }}
        run: |
          echo '## ServiceNow SBOM Action 🚀' >> $GITHUB_STEP_SUMMARY
          echo '### Input Arguments' >> $GITHUB_STEP_SUMMARY
          
          echo SANITY '${{ toJSON(inputs.args) }}'
          doSummarize=$(echo '${{ inputs.args }}' | jq -r '.summary.doSummarize')
          echo CHECK THIS VALUE $doSummarize
          
          
          if [ '${{ inputs.args.summary.doSummarize }}' == '' ]; then
            echo "_Default argument values in effect._" >> $GITHUB_STEP_SUMMARY
          fi
          
          {
              echo '~~~json'
              jq <<< '${{ inputs.args }}'
              echo '~~~'
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Checkout the ServiceNow SBOM Workflow.
        uses: actions/checkout@v4
        with:
          repository: jack-gronenthal-sn/sbom-action-beta
          path: service-now
          ref: json-input

      - name: Checkout Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest

      # Validate runtime arguments to the SBOM GitHub Action, not to the API itself.
      - name: Validate Runtime Arguments
        id: validate-runtime-args
        continue-on-error: true
        run: |
          npm install -g ajv-cli
          echo '${{ inputs.args }}' >> $GITHUB_WORKSPACE/service-now/_args.json
          
          mkdir $GITHUB_WORKSPACE/service-now/logs
          ajv test --spec=draft2020 -s $GITHUB_WORKSPACE/service-now/input_schema.json -d $GITHUB_WORKSPACE/service-now/_args.json --valid 2> $GITHUB_WORKSPACE/service-now/logs/.ajv_error_log ; \
            sed -n "s/.*message: \"\([^\"]*\)\".*/\1/p" $GITHUB_WORKSPACE/service-now/logs/.ajv_error_log

      - name: Report Validation Failures
        id: report-validation-failures
        if: ${{ steps.validate-runtime-args.outcome == 'failure' }}
        run: |
          echo "::group::Invalid Input Arguments"
          
          error_message=$(sed -n "s/.*message: \"\([^\"]*\)\".*/\1/p" $GITHUB_WORKSPACE/service-now/logs/.ajv_error_log)
          echo "::error title=❌ Runtime Arguments Failed Validation::$error_message" # Consider if the single quote will break this
          cat $GITHUB_WORKSPACE/service-now/logs/.ajv_error_log
          echo "::endgroup::"
          
          if [ ${{ inputs.args.summary.doSummarize == '' || inputs.args.summary.doSummarize == true }} ]; then
            {
              echo '### ❌ Invalid Input Arguments' >> $GITHUB_STEP_SUMMARY
              echo '~~~'
              cat $GITHUB_WORKSPACE/service-now/logs/.ajv_error_log
              echo '~~~'
              echo '> **🚧** Correct input arguments before re-executing.'
            } >> "$GITHUB_STEP_SUMMARY"
          fi
          
          exit 1

      - name: Report Validation Success & Set Runtime Arguments
        id: report-validation-success-and-set-arguments
        if: ${{ steps.validate-runtime-args.outcome == 'success' }}
        run: |
          echo "✅ Runtime Arguments Validated Successfully"
          provider_type=$(echo '${{ inputs.args }}' | jq -r '.provider.type')
          
          echo "::group::Arguments"
          echo "provider_type=$provider_type" >> $GITHUB_OUTPUT
          
          # Provider Type: Repository
          if [ "$provider_type" == "repository" ]; then
            repository_name=$(echo '${{ inputs.args }}' | jq -r '.provider.repository.repositoryName')
            path=$(echo '${{ inputs.args }}' | jq -r '.provider.repository.path')
          
            # Set the Outputs
            echo "repository_name=$repository_name" >> $GITHUB_OUTPUT
            echo "path=$path" >> $GITHUB_OUTPUT
          
            echo Provider Type: $provider_type
            echo Repository Name: $repository_name
            echo Path: $path
          fi
          
          # Provider Type: Payload
          if [ "$provider_type" == "payload" ]; then
            file_type=$(echo '${{ inputs.args }}' | jq -r '.provider.payload.type')
            document=$(echo '${{ inputs.args }}' | jq -r '.provider.payload.document')
          
            # Set the Outputs
            echo "file_type=$file_type" >> $GITHUB_OUTPUT
            {
              echo 'document<<EOF'
              echo '${{ inputs.args }}' | jq -r '.provider.payload.document'
              echo EOF
            } >> "$GITHUB_OUTPUT"
          
            echo File Type: $file_type
            echo BOM: $document            
          fi

          echo "::endgroup::"  

      - name: Checkout the client repository.
        uses: actions/checkout@v4
        if: ${{ steps.report-validation-success-and-set-arguments.outputs.provider_type == 'repository' }}
        with:
          repository: ${{ steps.report-validation-success-and-set-arguments.outputs.repository_name }}
          path: client
          sparse-checkout: |
            ${{ steps.report-validation-success-and-set-arguments.outputs.path }}

      - name: Fetch SBOM Document.
        id: fetch-sbom-document
        run: |
          {
            echo 'document<<EOF'
          
            if ${{ steps.report-validation-success-and-set-arguments.outputs.provider_type == 'repository' }}; then
              cat $GITHUB_WORKSPACE/client/${{ steps.report-validation-success-and-set-arguments.outputs.path }}
            fi
          
            if ${{ steps.report-validation-success-and-set-arguments.outputs.provider_type == 'payload' }}; then
              echo  '${{ steps.report-validation-success-and-set-arguments.outputs.document }}'
            fi
          
            echo EOF
          } >> "$GITHUB_OUTPUT"

  upload-sbom:
    name: Upload SBOM to ServiceNow
    needs: setup
    uses: jack-gronenthal-sn/sbom-action-beta/.github/workflows/curl.yml@json-input
    if: ${{ needs.setup.outputs.document != '' }}
    with:
     operation: upload
     document: '${{ needs.setup.outputs.document }}'
    secrets:
     sn-instance-url:   ${{ secrets.sn-instance-url }}
     sn-sbom-username:  ${{ secrets.sn-sbom-username }}
     sn-sbom-password:  ${{ secrets.sn-sbom-password }}

  status-sbom:
    name: Get Status of SBOM from ServiceNow
    needs: upload-sbom
    uses: jack-gronenthal-sn/sbom-action-beta/.github/workflows/curl.yml@json-input
    if: ${{ needs.setup.outputs.document != '' }} && ${{ needs.upload-sbom.outputs.bom_record_id != '' }}
    with:
      operation: status
      recordId: '${{ needs.upload-sbom.outputs.bom_record_id }}'
    secrets:
      sn-instance-url: ${{ secrets.sn-instance-url }}
      sn-sbom-username: ${{ secrets.sn-sbom-username }}
      sn-sbom-password: ${{ secrets.sn-sbom-password }}

      
